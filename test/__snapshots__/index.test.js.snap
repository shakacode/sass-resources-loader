// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sass-resources-loader hoisting should hoist entry @use imports when option hoistUseStatements is true 1`] = `
"@use 'shared/index' as secret;

$text-color: $ccc;

@mixin my-mixin {
    background-color: gray;
    color: white;
}

@function always-blue() {
    @return blue;
}

div {
    @include secret.my-mixin;

    p {
        color: secret.always-blue();
    }
}
"
`;

exports[`sass-resources-loader hoisting should not hoist entry @use imports when option hoistUseStatements is false 1`] = `
"$text-color: $ccc;

@mixin my-mixin {
    background-color: gray;
    color: white;
}

@function always-blue() {
    @return blue;
}

@use 'shared/index' as secret;

div {
    @include secret.my-mixin;

    p {
        color: secret.always-blue();
    }
}
"
`;

exports[`sass-resources-loader hoisting should not hoist entry @use imports when option hoistUseStatements is not passed 1`] = `
"$text-color: $ccc;

@mixin my-mixin {
    background-color: gray;
    color: white;
}

@function always-blue() {
    @return blue;
}

@use 'shared/index' as secret;

div {
    @include secret.my-mixin;

    p {
        color: secret.always-blue();
    }
}
"
`;

exports[`sass-resources-loader hoisting should work with multiline @use statements 1`] = `
"@use 'shared/index' with (
    $text-color: blue
);

$text-color: $ccc;

@mixin my-mixin {
    background-color: gray;
    color: white;
}

@function always-blue() {
    @return blue;
}

div {
    @include secret.my-mixin;

    p {
        color: secret.always-blue();
    }
}
"
`;

exports[`sass-resources-loader imports should not rewrite the path for built-ins with @use 1`] = `
"// Should be de-duplicated
@use 'sass:math';


$padding: #{math.div(4 / 2)}px;

div {
    padding: $padding;
    margin: #{math.div(4 / 2)}px;;
}
"
`;

exports[`sass-resources-loader imports should not rewrite the path for built-ins with @use and double quotes 1`] = `
"// Should be de-duplicated
@use 'sass:math';


$padding: #{math.div(4 / 2)}px;

div {
    padding: $padding;
    margin: #{math.div(4 / 2)}px;;
}
"
`;

exports[`sass-resources-loader imports should preserve import method 1`] = `
"@use 'shared/index' as secret;
@import 'shared/variables';

div {
    display: block;
    color: $text-color;
}
"
`;

exports[`sass-resources-loader resources should include resources 1`] = `
"@use 'shared/index' as secret;
@import 'shared/variables';

div {
    display: block;
    color: $text-color;
}
"
`;

exports[`sass-resources-loader resources should parse array resources 1`] = `
"@use 'shared/index' as secret;
@import 'shared/variables';

@forward \\"variables\\";

@use \\"sass:math\\";

$padding: #{math.div(4 / 2)}px;

@use 'sass:math';

$padding: #{math.div(4 / 2)}px;

$text-color: $ccc;

@mixin my-mixin {
    background-color: gray;
    color: white;
}

@function always-blue() {
    @return blue;
}

"
`;

exports[`sass-resources-loader resources should parse resource 1`] = `
"$text-color: $ccc;

@mixin my-mixin {
    background-color: gray;
    color: white;
}

@function always-blue() {
    @return blue;
}

"
`;
